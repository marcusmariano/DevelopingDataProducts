# calculate upper 95% CI bound
ul <- phats + qnorm(.975) * sqrt(phats * (1 - phats) / n)
# calculate percent of intervals that contain p
mean(ll < p & ul > p)
})
# plot CI results vs 95%
ggplot(data.frame(pvals, coverage), aes(x = pvals, y = coverage)) +
geom_line(size = 2) + geom_hline(yintercept = 0.95)
# simulate 1000 samples of size 20 each
n <- 20; nosim <- 1000
# simulate for p values from 0.1 to 0.9
pvals <- seq(.1, .9, by = .05)
# calculate the confidence intervals
coverage <- sapply(pvals, function(p){
# simulate binomial data with Agresti/Coull Interval adjustment
phats <- (rbinom(nosim, prob = p, size = n) + 2) / (n + 4)
# calculate lower 95% CI bound
ll <- phats - qnorm(.975) * sqrt(phats * (1 - phats) / n)
# calculate upper 95% CI bound
ul <- phats + qnorm(.975) * sqrt(phats * (1 - phats) / n)
# calculate percent of intervals that contain p
mean(ll < p & ul > p)
})
# plot CI results vs 95%
ggplot(data.frame(pvals, coverage), aes(x = pvals, y = coverage)) +
geom_line(size = 2) + geom_hline(yintercept = 95)
nosim <- 1000
nosim
class(nosim)
84.1 - 15.9
library(ggplot2)
nosim <- 1000
# simulate data for sample size 1 to 4
dat <- data.frame(
x = c(sample(1 : 6, nosim, replace = TRUE),
apply(matrix(sample(1 : 6, nosim * 2, replace = TRUE), nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 3, replace = TRUE), nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 4, replace = TRUE), nosim), 1, mean)),
size = factor(rep(1 : 4, rep(nosim, 4))))
# plot histograms of means by sample size
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.25, colour = "black")
g + facet_grid(. ~ size)
library(ggplot2)
library(manipulate)
## galton ?
myHist <- function(mu){
g <- ggplot(galton, aes(x = child))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 2)
g <- g + geom_vline(xintercept = mu, size = 2)
mse <- round(mean((galton$child - mu)^2), 3)
g <- g + labs(title = paste('mu = ', mu, ' MSE = ', mse))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(UsingR); data(galton); library(ggplot2)
myHist <- function(mu){
g <- ggplot(galton, aes(x = child))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 2)
g <- g + geom_vline(xintercept = mu, size = 2)
mse <- round(mean((galton$child - mu)^2), 3)
g <- g + labs(title = paste('mu = ', mu, ' MSE = ', mse))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
# generate x value ranges
xvals <- seq(-10, 10, by = .01)
# generate data from normal distribution for sd of 1 to 4
dat <- data.frame(
y = c(dnorm(xvals, mean = 0, sd = 1),
dnorm(xvals, mean = 0, sd = 2),
dnorm(xvals, mean = 0, sd = 3),
dnorm(xvals, mean = 0, sd = 4)),
x = rep(xvals, 4),
factor = factor(rep(1 : 4, rep(length(xvals), 4)))
)
# lot 4 lines for the different standard deviations
ggplot(dat, aes(x = x, y = y, color = factor)) + geom_line(size = 2)
nosim <- 10000;
# simulate data for various sample sizes
dat <- data.frame(
x = c(apply(matrix(rnorm(nosim * 10), nosim), 1, var),
apply(matrix(rnorm(nosim * 20), nosim), 1, var),
apply(matrix(rnorm(nosim * 30), nosim), 1, var)),
n = factor(rep(c("10", "20", "30"), c(nosim, nosim, nosim))) )
# plot density function for different sample size data
ggplot(dat, aes(x = x, fill = n)) + geom_density(size = 1, alpha = .2) +
geom_vline(xintercept = 1, size = 1)
x <- seq(-3, 3, length = 1000)
g <- ggplot(data.frame(x = x, y = dnorm(x)),
aes(x = x, y = y)) + geom_line(size = 2)
g <- g + geom_vline(xintercept = -3 : 3, size = 2)
g
N <- c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100,
10, 30, 50, 80, 100, 150, 200, 250, 270, 300,
10, 30, 36, 80, 96, 106, 110, 130, 136, 144,
10, 15, 30, 50, 70, 86, 95, 100, 105, 190,
10, 40, 50, 66, 78, 96, 107, 120, 144, 157,
10, 30, 57, 98, 106, 130, 160, 177, 189, 198)
N <- c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100,
10, 30, 50, 80, 100, 150, 200, 250, 270, 300,
10, 30, 36, 80, 96, 106, 110, 130, 136, 144,
10, 15, 30, 50, 70, 86, 95, 100, 105, 190,
10, 40, 50, 66, 78, 96, 107, 120, 144, 157,
10, 30, 57, 98, 106, 130, 160, 177, 189, 198)
x1 <- mean(20, 80, 78, 130, 160)
x2 <- mean(200, 110, 107, 60, 66)
x3 <- mean(57, 10, 98, 177, 300)
x4 <- mean(106, 30, 105, 80, 144)
x <- seq(-3, 3, length = 1000)
g <- ggplot(data.frame(x = x, y = dnorm(x)),
aes(x = x, y = y)) + geom_line(size = 2)
g <- g + geom_vline(xintercept = -3 : 3, size = 2)
g
head(x)
<
<
nosim <- 1000
n <- 10
sd(apply(matrix(runif(nosim * n), nosim), 1, mean))
?pbinom
?pnorm
pnorm(93, mean = 100, sd = 10)
qnorm(93, mean = 100, sd = 10)
curve(dchisq(x,1),1,30) #qui-quadrado: 1 grau de liberdade
curve(dchisq(x,5),1,30,add=T) #agora com 5 graus de liberdade
curve(dchisq(x,10),1,30,add=T)
qnorm(95, mean = 100, sd = 10)
qnorm(.95, mean = 100, sd = 10)
qnorm(.5, mean = 100, sd = 10)
qnorm(-.5, mean = 100, sd = 10)
qnorm(- 0.5, mean = 100, sd = 10)
pnorm(95, mean = 1,100, sd = 75)
qnorm(.95, mean = 1,100, sd = 75)
qnorm(.95, mean = 1100, sd = 75)
pnorm(95, mean = 1100, sd = 75)
pnorm(95, mean = 1100, sd = 75)
qnorm(.95, mean = 1100, sd = 75)
qnorm(.95, mean = 100, sd = 75)
pnorm(.95, mean = 100, sd = 75)
pnorm(95, mean = 100, sd = 75)
pbinom(4, size = 5, prob = 0.5, lower.tail = FALSE)
?ppois
ppois(10, 5*3)
round(ppois(10, lambda = 5*3)*100, 1)
round(ppois(10, lambda = 5*3)*100, 0)
round(ppois(10, lambda = 5*3)*100, 1)
round(ppois(10, lambda = 5*3)*100, 0)
?sigma
mean = 0.5
sigma = sqrt(1 / 12)
sqrt(100)
sigma = sqrt(1 / 12) / sqrt(1000)
pnorm(0.5, mean = mean, sd = sigma, lower.tail = FALSE)
qnorm(.95, mean = 100, sd = 75)
qnorm(.95, mean = 100, sd = 75)
pnorm(95, mean = 100, sd = 75)
pnorm(1100, mean = 100, sd = 75, lower.tail = FALSE)
pnorm(1100, mean = 100, sd = 75)
1 -pnorm(1100, mean = 100, sd = 75)
1 - pnorm(1100, mean = 100, sd = 75)
qnorm(.95, mean = 1100, sd = 75)
pnorm(100, mean = 15, sd = 10)
?pnorm
pbinom
?pbinom
pbinom(14:16, size = 100, prob = 0.5, lower.tail = FALSE)
pbinom(14:16, size = 100, prob = 0.16, lower.tail = FALSE)
pbinom(15, size = 100, prob = 0.16, lower.tail = FALSE)
mean = 0.5
sigma = sqrt(1 / 12) / sqrt(1000)
pnorm(0.5, mean = mean, sd = sigma, lower.tail = FALSE)
qnorm(.95, mean = 100, sd = 75)
pbinom(4, size = 5, prob = 0.5, lower.tail = FALSE)
pnorm(70, mean = 80, sd = 10)
pnorm(-1)
# simulate 1000 samples of size 20 each
n <- 5; nosim <- 1000
# simulate for p values from 0.1 to 0.9
pvals <- seq(.1, .9, by = .05)
# calculate the confidence intervals
coverage <- sapply(pvals, function(p){
# simulate binomial data
phats <- rbinom(nosim, prob = p, size = n) / n
# calculate lower 95% CI bound
ll <- phats - qnorm(.975) * sqrt(phats * (1 - phats) / n)
# calculate upper 95% CI bound
ul <- phats + qnorm(.975) * sqrt(phats * (1 - phats) / n)
# calculate percent of intervals that contain p
mean(ll < p & ul > p)
})
# plot CI results vs 95%
ggplot(data.frame(pvals, coverage), aes(x = pvals, y = coverage)) +
geom_line(size = 2) + geom_hline(yintercept = 0.95)
library(ggplot2)
# simulate 1000 samples of size 20 each
n <- 5; nosim <- 1000
# simulate for p values from 0.1 to 0.9
pvals <- seq(.1, .9, by = .05)
# calculate the confidence intervals
coverage <- sapply(pvals, function(p){
# simulate binomial data
phats <- rbinom(nosim, prob = p, size = n) / n
# calculate lower 95% CI bound
ll <- phats - qnorm(.975) * sqrt(phats * (1 - phats) / n)
# calculate upper 95% CI bound
ul <- phats + qnorm(.975) * sqrt(phats * (1 - phats) / n)
# calculate percent of intervals that contain p
mean(ll < p & ul > p)
})
# plot CI results vs 95%
ggplot(data.frame(pvals, coverage), aes(x = pvals, y = coverage)) +
geom_line(size = 2) + geom_hline(yintercept = 0.95)
library(ggplot2)
# Plot normal vs t distributions
k <- 1000; xvals <- seq(-5, 5, length = k); df <- 10
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist)) +
ggtitle("Normal vs T Distribution")
# plot normal vs t quantiles
d <- data.frame(n= qnorm(pvals),t=qt(pvals, df),p = pvals)
h <- ggplot(d, aes(x= n, y = t))
h <- h + geom_abline(size = 2, col = "lightblue")
h <- h + geom_line(size = 2, col = "black")
h <- h + geom_vline(xintercept = qnorm(0.975))
h <- h + geom_hline(yintercept = qt(0.975, df)) + ggtitle("Normal vs T Quantiles")
# plot 2 graphs together
grid.arrange(g, h, ncol = 2)
k <- 1000; xvals <- seq(-5, 5, length = k); df <- 10
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist)) +
ggtitle("Normal vs T Distribution")
# plot normal vs t quantiles
d <- data.frame(n= qnorm(pvals),t=qt(pvals, df),p = pvals)
pvals <- seq(.1, .9, by = .05)
k <- 1000; xvals <- seq(-5, 5, length = k); df <- 10
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist)) +
ggtitle("Normal vs T Distribution")
# plot normal vs t quantiles
d <- data.frame(n= qnorm(pvals),t=qt(pvals, df),p = pvals)
h <- ggplot(d, aes(x= n, y = t))
h <- h + geom_abline(size = 2, col = "lightblue")
h <- h + geom_line(size = 2, col = "black")
h <- h + geom_vline(xintercept = qnorm(0.975))
h <- h + geom_hline(yintercept = qt(0.975, df)) + ggtitle("Normal vs T Quantiles")
# plot 2 graphs together
grid.arrange(g, h, ncol = 2)
k <- 1000; xvals <- seq(-5, 5, length = k); df <- 10
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist)) +
ggtitle("Normal vs T Distribution")
# plot normal vs t quantiles
d <- data.frame(n= qnorm(pvals),t=qt(pvals, df),p = pvals)
h <- ggplot(d, aes(x= n, y = t))
h <- h + geom_abline(size = 2, col = "lightblue")
h <- h + geom_line(size = 2, col = "black")
h <- h + geom_vline(xintercept = qnorm(0.975))
h <- h + geom_hline(yintercept = qt(0.975, df)) + ggtitle("Normal vs T Quantiles")
# plot 2 graphs together
grid.arrange(g, h, ncol = 2)
install.packages("gridExtra")
k <- 1000; xvals <- seq(-5, 5, length = k); df <- 10
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist)) +
ggtitle("Normal vs T Distribution")
# plot normal vs t quantiles
d <- data.frame(n= qnorm(pvals),t=qt(pvals, df),p = pvals)
h <- ggplot(d, aes(x= n, y = t))
h <- h + geom_abline(size = 2, col = "lightblue")
h <- h + geom_line(size = 2, col = "black")
h <- h + geom_vline(xintercept = qnorm(0.975))
h <- h + geom_hline(yintercept = qt(0.975, df)) + ggtitle("Normal vs T Quantiles")
# plot 2 graphs together
grid.arrange(g, h, ncol = 2)
library("gridExtra")
library(gridExtra)
k <- 1000; xvals <- seq(-5, 5, length = k); df <- 10
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist)) +
ggtitle("Normal vs T Distribution")
# plot normal vs t quantiles
d <- data.frame(n= qnorm(pvals),t=qt(pvals, df),p = pvals)
h <- ggplot(d, aes(x= n, y = t))
h <- h + geom_abline(size = 2, col = "lightblue")
h <- h + geom_line(size = 2, col = "black")
h <- h + geom_vline(xintercept = qnorm(0.975))
h <- h + geom_hline(yintercept = qt(0.975, df)) + ggtitle("Normal vs T Quantiles")
# plot 2 graphs together
grid.arrange(g, h, ncol = 2)
k <- 1000
xvals <- seq(-5, 5, length = k)
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist))
g
}
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
library(manipulate)
k <- 1000
xvals <- seq(-5, 5, length = k)
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist))
g
}
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
pvals <- seq(.5, .99, by = .01)
myplot2 <- function(df){
d <- data.frame(n= qnorm(pvals),t=qt(pvals, df),
p = pvals)
g <- ggplot(d, aes(x= n, y = t))
g <- g + geom_abline(size = 2, col = "lightblue")
g <- g + geom_line(size = 2, col = "black")
g <- g + geom_vline(xintercept = qnorm(0.975))
g <- g + geom_hline(yintercept = qt(0.975, df))
g
}
manipulate(myplot2(df), df = slider(1, 20, step = 1))
data(sleep)
head(sleep)
head(sleep, 12)
g <- ggplot(sleep, aes(x = group, y = extra, group = factor(ID)))
g <- g + geom_line(size = 1, aes(colour = ID)) + geom_point(size =10,
pch = 21, fill = "salmon", alpha = g)
g <- ggplot(sleep, aes(x = group, y = extra, group = factor(ID)))
g <- g + geom_line(size = 1, aes(colour = ID)) + geom_point(size =10,
pch = 21, fill = "salmon", alpha = 0)
g
g <- ggplot(sleep, aes(x = group, y = extra, group = factor(ID)))
g <- g + geom_line(size = 1, aes(colour = ID)) + geom_point(size =10,
pch = 21, fill = "salmon", alpha = 5)
g
g <- ggplot(sleep, aes(x = group, y = extra, group = factor(ID)))
g <- g + geom_line(size = 1, aes(colour = ID)) + geom_point(size =10,
pch = 21, fill = "salmon", alpha = 1)
g
g1 <- sleep$extra[1 : 10]; g2 <- sleep$extra[11 : 20]
# define difference
difference <- g2 - g1
# calculate mean and sd of differences
mn <- mean(difference); s <- sd(difference); n <- 10
# calculate intervals manually
mn + c(-1, 1) * qt(.975, n-1) * s / sqrt(n)
t.test(difference)
mn + c(-1, 1) * qt(0.975, n - 1) * s/sqrt(n)
t.test(difference)
t.test(g2, g1, paired = TRUE)
t.test(extra ~ I(relevel(group, 2)), paired = TRUE, data = sleep)
mn + c(-1, 1) * qt(0.975, n - 1) * s/sqrt(n)
t.test(difference)
t.test(g2, g1, paired = TRUE)
t.test(extra ~ I(relevel(group, 2)), paired = TRUE, data = sleep)
swirl(
library(swirl)
swirl()
mn + c(-1, 1) * qt(0.975, n - 1) * s/sqrt(n)
t.test(difference)
t.test(g2, g1, paired = TRUE)
t.test(extra ~ I(relevel(group, 2)), paired = TRUE, data = sleep)
# define groups
g1 <- sleep$extra[1 : 10]; g2 <- sleep$extra[11 : 20]
# define difference
difference <- g2 - g1
# calculate mean and sd of differences
mn <- mean(difference); s <- sd(difference); n <- 10
# calculate intervals manually
mn + c(-1, 1) * qt(.975, n-1) * s / sqrt(n)
sp <- sqrt((7 * 15.34^2 + 20 * 18.23^2)/(8 + 21 - 2))
132.86 - 127.44 + c(-1, 1) * qt(0.975, 27) * sp * (1/8 + 1/21)^0.5
n1 <- length(g1)
n2 <- length(g2)
sp <- sqrt(((n1 - 1) * sd(x1)^2 + (n2 - 1) * sd(x2)^2)/(n1 + n2 - 2))
md <- mean(g2) - mean(g1)
semd <- sp * sqrt(1/n1 + 1/n2)
rbind(md + c(-1, 1) * qt(0.975, n1 + n2 - 2) * semd, t.test(g2, g1,
paired = FALSE, var.equal = TRUE)$conf, t.test(g2, g1, paired = TRUE)$conf)
library(datasets)
data(ChickWeight)
library(reshape2)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)[-(1:2)] <- paste("time", names(wideCW)[-(1:2)], sep = "")
library(dplyr)
head(wideCW, 12)
head(ChickWeight, 12)
wideCW <- mutate(windeCW,
gain = time21 - time0
)
wideCW <- mutate(wideCW,
gain = time21 - time0
)
head(wideCW, 12)
wideCW14 <- subset(wideCW, Diet %in% c(1, 4))
rbind(t.test(gain ~ Diet, paired = FALSE, var.equal = TRUE, data = wideCW14)$conf,
t.test(gain ~ Diet, paired = FALSE, var.equal = FALSE, data = wideCW14)$conf)
data(sleep)
g1 <- sleep$extra[1 : 10]; g2 <- sleep$extra[11 : 20]
n1 <- length(g1); n2 <- length(g2)
md <- mean(g2) - mean(g1)
# Below, I've taken sd(g1) instead of sd(x1) and sd(g2) instead of x2
sp <- sqrt( ((n1 - 1) * sd(g1)^2 + (n2-1) * sd(g2)^2) / (n1 + n2-2))
semd <- sp * sqrt(1 / n1 + 1/n2)
print(rbind(
md + c(-1, 1) * qt(.975, n1 + n2 - 2) * semd,
t.test(g2, g1, paired = FALSE, var.equal = TRUE)$conf,
t.test(g2, g1, paired = TRUE)$conf
))
library(UsingR); data(father.son)
t.test(father.son$sheight - father.son$fheight)
library(datasets); data(ChickWeight); library(reshape2)
##define weight gain or loss
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
library(dplyr)
wideCW <- mutate(wideCW,
gain = time21 - time0
)
head(wideCW, 12)
wideCW14 <- subset(wideCW, Diet %in% c(1, 4))
t.test(gain ~ Diet, paired = FALSE,
var.equal = TRUE, data = wideCW14)
pt(2.5, 15, lower.tail = FALSE)
source('D:/Marcus/Projetos/R/02 - RProgramming/Assignment 2/cachematrix.R', echo=TRUE)
makeCacheMatrix
get()
makeCacheMatrix
get
makeCacheMatrix
set
makeCacheMatrix(2,3,4,5)
?matix
?matrix
makeCacheMatrix(c(1,2, 11,13), nrow = 2, ncol = 2)
makeCacheMatrix(c(1,2, 11,13))
set
makeCacheMatrix(c(1,2, 11,13))
makeCacheMatrix
makeCacheMatrix(c(1,2, 11,13))
getsolve()
makeCacheMatrix()
b <- c(1,2, 11,13)
makeCacheMatrix(b)
getsolve
makeCacheMatrix(b)
b$getsolve()
library(datasets)
data(mtcars)
mean(mpg)
attach(mtcars)
library(datasets)
data(mtcars)
head(mtcars)
mean(mpg)
attach(mtcars)
head(mtcars)
mean(mpg)
g1 <- sleep$extra[1 : 10]; g2 <- sleep$extra[11 : 20]
difference <- g2 - g1
mn <- mean(difference); s <- sd(difference); n <- 10
mn + c(-1, 1) * qt(.975, n-1) * s / sqrt(n)
t.test(difference)
mn + c(-1, 1) * qt(0.975, n - 1) * s/sqrt(n)
library(devtools); library(slidify);library(knitr)
setwd("D:/Marcus/Projetos/R/09 - Developing Data Products/Project/Reproducible Pitch Presentation")
slidify('index.Rmd')
browseURL('index.html')
str(diamonds)
library(ggplot2)
ggplot(diamonds, aes(x = carat, y = price, color = clarity)) + geom_point()
unique(diamonds$clarity)
slidify('index.Rmd')
browseURL('index.html')
str(diamonds)
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
str(diamonds)
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
library(ggplot2); library(rCharts); library(devtools)
slidify('index.Rmd')
browseURL('index.html')
